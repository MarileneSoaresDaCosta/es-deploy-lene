apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
data:
  logstash.yml: |
    http.host: "0.0.0.0"
  pipelines.yml: |
    - pipeline.id: users
      path.config: /usr/share/logstash/pipeline/logstash.users.conf
    - pipeline.id: products
      path.config: /usr/share/logstash/pipeline/logstash.products.conf
    - pipeline.id: content
      path.config: /usr/share/logstash/pipeline/logstash.content.conf
    - pipeline.id: comments
      path.config: /usr/share/logstash/pipeline/logstash.comments.conf
  logstash.users.conf: |
    input {
      jdbc { 
        jdbc_connection_string => "jdbc:mysql://${DB_HOST}:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # The user we wish to execute our statement as
        jdbc_user => "${DB_USER}"
        jdbc_password => "${DB_PASSWORD}"
        # our query
        schedule => "* * * * *"
        statement => "SELECT u.id, avatar, first_name, last_name, username, verified, created_at, zipcode FROM users u LEFT JOIN address a ON u.id = a.user_id WHERE created_at > :sql_last_value ORDER BY created_at;" 
        use_column_value => true
        tracking_column => "created_at"
        last_run_metadata_path => "/usr/share/logstash/.logstash-users_jdbc_last_run"
      }
    }
    output {
      elasticsearch {
        hosts => [ "${ES_HOST}" ]
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        index => "users"
        document_id => "%{id}"
        ecs_compatibility => v1
        cacert => "/etc/logstash/certificates/ca.crt"
      }
    }
  logstash.products.conf: |
    input {
      jdbc { 
        jdbc_connection_string => "jdbc:mysql://${DB_HOST}:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # The user we wish to execute our statement as
        jdbc_user => "${DB_USER}"
        jdbc_password => "${DB_PASSWORD}"
        # our query
        schedule => "* * * * *"
        statement => "SELECT product_id as id, p.name, description, image, price, shippable, p.creation_date_time as created_at, s.store_name FROM products p LEFT JOIN stores s ON p.product_id = s.store_id WHERE p.creation_date_time > :sql_last_value ORDER BY p.creation_date_time;"
        use_column_value => true
        tracking_column => "created_at" 
        last_run_metadata_path => "/usr/share/logstash/.logstash-products_jdbc_last_run"
      }
    }
    output {
      elasticsearch {
        hosts => [ "${ES_HOST}" ]
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        index => "products"
        document_id => "%{id}"
        ecs_compatibility => v1
        cacert => "/etc/logstash/certificates/ca.crt"
      }
    }
  logstash.content.conf: |
    input {
      jdbc { 
        jdbc_connection_string => "jdbc:mysql://${DB_HOST}:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # The user we wish to execute our statement as
        jdbc_user => "${DB_USER}"
        jdbc_password => "${DB_PASSWORD}"
        # our query
        schedule => "* * * * *"
        statement => "SELECT p.id, p.created_at, p.date_edited, p.body, p.title, p.visibility, p.primary_image_id, u.username, t.tag_id as tag FROM posts p LEFT JOIN users u ON u.id = p.user_id LEFT JOIN post_tag t ON p.id = t.post_id;"
        use_column_value => true
        tracking_column => "date_edited" 
        last_run_metadata_path => "/usr/share/logstash/.logstash-content_jdbc_last_run"
      }
    }
    filter {
      aggregate {
        task_id => "%{id}"
        code => "
          map['id'] ||= event.get('id')
          map['created_at'] ||= event.get('created_at')
          map['date_edited'] ||= event.get('date_edited')
          map['title'] ||= event.get('title')
          map['body'] ||= event.get('body')
          map['visibility'] ||= event.get('visibility')
          map['primary_image'] ||= event.get('primary_image')
          map['username'] ||= event.get('username')
          map['tags'] ||= []
          map['tags'] << {'tag' => event.get('tag')}
          event.cancel()
        "
        push_previous_map_as_event => true
        timeout => 3
      }
    }
    output {
      elasticsearch {
        hosts => [ "${ES_HOST}" ]
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        index => "content"
        document_id => "%{id}"
        ecs_compatibility => v1
        cacert => "/etc/logstash/certificates/ca.crt"
      }
    }
  logstash.comments.conf: |
    input {
      jdbc { 
        jdbc_connection_string => "jdbc:mysql://${DB_HOST}:3306/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # The user we wish to execute our statement as
        jdbc_user => "${DB_USER}"
        jdbc_password => "${DB_PASSWORD}"
        # our query
        schedule => "* * * * *"
        statement => "SELECT c.id, c.text, c.created_at, c.updated_at, p.title, p.id, u.username FROM comments c LEFT JOIN users u ON c.user_id = u.id LEFT JOIN posts p ON c.content_id = p.id WHERE c.updated_at > :sql_last_value ORDER BY c.updated_at;"
        use_column_value => true
        tracking_column => "updated_at" 
        last_run_metadata_path => "/usr/share/logstash/.logstash-comments_jdbc_last_run"
      }
    }
    output {
      stdout { codec => rubydebug }
      elasticsearch {
        hosts => [ "${ES_HOST}" ]
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        index => "comments"
        document_id => "%{id}"
        ecs_compatibility => v1
        cacert => "/etc/logstash/certificates/ca.crt"
      }
    }

    